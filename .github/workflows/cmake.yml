name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release

permissions:
  contents: write

jobs:
  build_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt-get -qq update && sudo apt-get install -y libsdl2-dev
    - name: Configure 
      run: cmake -B ${{ github.workspace }}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config ${{env.BUILD_TYPE}} -j
    - name: Install sonar-scanner and build-wrapper
      uses: SonarSource/sonarcloud-github-c-cpp@v1
    - name: Run sonar-scanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        sonar-scanner -Dsonar.host.url="${{ env.SONAR_HOST_URL }}" \
                      -Dsonar.cfamily.compile-commands=build/compile_commands.json \
                      -X \
                      -Dsonar.projectKey=jochenjagers_DerClou \
                      -Dsonar.organization=jochenjagers \
                      -Dsonar.exclusions=**/gamedata/** \
                      -Dsonar.cfamily.cache.enabled=false \
                      -Dsonar.projectBaseDir=${{ github.workspace }}

  build_windows:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: sudo apt-get -qq update && sudo apt-get install -y mingw-w64 zip
    - name: Configure
      run: cmake -DCMAKE_TOOLCHAIN_FILE=cmake/mingw.cmake -B ${{ github.workspace }}/build_win32 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
    - name: Build
      run: cmake --build ${{ github.workspace }}/build_win32 --config ${{env.BUILD_TYPE}} -j
    - name: Install
      run: cmake --install ${{ github.workspace }}/build_win32 --prefix=DerClou
    - name: Package
      run: zip DerClou-latest-german.zip -r DerClou
    - name: Update "latest" tag
      uses: rickstaa/action-create-tag@v1
      with:
        tag: "latest"
        message: "Latest main version"
        force_push_tag: true
    - name: Get release
      id: get_release
      uses: cardinalby/git-get-release-action@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        tag: 'latest'
    - name: Upload release binary
      uses: softprops/action-gh-release@v1
      with:
        upload_url: ${{ steps.get_release.outputs.upload_url }}
        tag_name: latest
        files: DerClou-latest-german.zip
        prerelease: true
